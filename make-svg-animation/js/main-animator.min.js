var animateDuration = 3,
    lineThickness = .5,
    styleHTML = ".animate-svg path{-webkit-animation:draw ease-in-out forwards;animation:draw ease-in-out forwards;stroke:#000}.animate-svg{-webkit-animation:fillopacity " + animateDuration + " ease-in-out forwards;animation:fillopacity " + animateDuration + "s ease-in-out forwards}@-webkit-keyframes draw{100%{stroke-dashoffset:0}}@keyframes draw{100%{stroke-dashoffset:0}}@-webkit-keyframes fillopacity{0%,70%{fill-opacity:0;stroke-width:" + lineThickness + "%}100%{fill-opacity:1;stroke-width:0}}@keyframes fillopacity{0%,70%{fill-opacity:0;stroke-width:" + lineThickness + "%}100%{fill-opacity:1;stroke-width:0}}";

function readFileContents() {
    updateOptions();
    var e = document.getElementById("fileInput"),
        t = e.value,
        a = /(\.jpg|\.jpeg|\.png|\.gif)$/i;
    if (e.files[0].size > 1048576) return /(.)/.exec(t) && alert("Your file is too large. Max file size is 1MB. We do not recommend files larger than 100KB for performance reasons."), void(e.value = "");
    if (!a.exec(t) && !/(\.svg)$/i.exec(t) && "" !== t.value) return /(.)/.exec(t) && alert("Please upload file having extensions .jpeg/.jpg/.png/.gif/.svg only."), void(e.value = "");
    var n = new FileReader;
    a.exec(t) ? (n.onload = function() {
        document.getElementById("original-pic").setAttribute("src", n.result), svgConvert(n.result)
    }, n.readAsDataURL(e.files[0])) : (n.onload = function() {
        document.getElementById("original-pic").setAttribute("src", n.result), displaySVG(n.result)
    }, n.readAsText(e.files[0]))
}

function activateAnimation() {
    var e = document.getElementById("page-wrapper").querySelector("svg");
    e.classList.contains("animate-svg") || (e.classList.add("animate-svg"), setTimeout(function() {
        e.classList.remove("animate-svg"), "" == e.getAttribute("class") && e.removeAttribute("class")
    }, 1e3 * animateDuration)), addPathAttr(e), insertStyles(e)
}

function resetButton() {
    var e = document.getElementById("fileDisplayArea");
    document.getElementById("original-pic").removeAttribute("src"), e.innerHTML = "", e.classList.remove("populated");
    var t = document.createElement("label");
    t.setAttribute("id", "import-button"), t.setAttribute("for", "fileInput"), t.innerText = "Select Image", e.appendChild(t), fileInput.addEventListener("change", function() {
        readFileContents()
    })
}

function exportSvg() {
    fileDisplayArea = document.getElementById("fileDisplayArea");
    var e = fileDisplayArea.querySelector("svg").cloneNode(!0);
    e.classList.contains("animate-svg") || e.classList.add("animate-svg");
    var t = document.createElement("div");
    t.appendChild(e);
    var a = btoa(unescape(encodeURIComponent(t.innerHTML))),
        n = document.createElement("a"),
        i = new MouseEvent("click");
    n.download = "animated.svg", n.href = "data:text/html;base64," + a, n.dispatchEvent(i), t = ""
}
eventFire(document.querySelector("#reset-button a"), "click");
var submitButton = document.getElementById("exportFileButton");

function svgConvert(e) {
    e || readFileContents(), e && ImageTracer.loadImage(e, function(e) {
        displaySVG(svgCleaner(ImageTracer.imagedataToSVG(ImageTracer.getImgdata(e), "custom")))
    })
}

function displaySVG(e) {
    var t = document.getElementById("fileDisplayArea");
    t.innerHTML = e, t.classList.add("populated"), eventFire(document.querySelector("#animate a"), "click")
}

function eventFire(e, t) {
    if (e.fireEvent) e.fireEvent("on" + t);
    else {
        var a = document.createEvent("Events");
        a.initEvent(t, !0, !1), e.dispatchEvent(a)
    }
}

function insertStyles(e) {
    var t = e.querySelector("style"),
        a = e.querySelector("defs");
    if (!t) {
        var n = document.createElement("style");
        if (!a) {
            var i = document.createElement("defs");
            e.insertBefore(i, e.childNodes[0]), a = e.querySelector("defs")
        }
        a.insertBefore(n, a.childNodes[0]), t = e.querySelector("style")
    }
    t.innerHTML.includes("@keyframes") || t.insertAdjacentHTML("afterBegin", styleHTML)
}

function addPathAttr(e) {
    var t = e.querySelectorAll("path"),
        a = [];
    for (i = 0; i < t.length; i++) a.push(t[i].getTotalLength());
    var n = Math.max(...a),
        r = Math.min(...a);
    for (y = 0; y < t.length; y++) {
        var o = t[y].getTotalLength(),
            s = r / n / (o / n) * (.7 - r / n);
        t[y].style.strokeDasharray || (t[y].style.strokeDasharray = o), t[y].style.strokeDashoffset || (t[y].style.strokeDashoffset = o), t[y].style.animationDelay || (t[y].style.animationDelay = y / t.length + "s"), t[y].style.animationDuration || (t[y].style.animationDuration = (o / n + s) * (.7 * animateDuration) + "s")
    }
}

function svgCleaner(e) {
    var t = document.createElement("div");
    t.innerHTML = e;
    var a = t.querySelectorAll("circle"),
        n = t.querySelectorAll("line");
    for (i = 0; i < n.length; i++) "cyan" != n[i].getAttribute("stroke") || n[i].parentNode.removeChild(n[i]);
    for (i = 0; i < a.length; i++) 0 == a[i].getAttribute("r") && a[i].parentNode.removeChild(a[i]);
    return t.innerHTML
}

function updateOptions() {
    for (optionList = document.querySelectorAll("[data-value]"), i = 0; i < optionList.length; i++) optionName = optionList[i].dataset.value, ImageTracer.optionpresets.custom[optionName] = document.querySelector('[data-value="' + optionName + '"]').value;
    animateDuration = 3, lineThickness = .5
}
submitButton.addEventListener("click", function() {
    var e = setInterval(function() {
        var t = document.querySelector("div.elementor-message.elementor-message-success");
        document.querySelector("div.elementor-message.elementor-message-danger") ? clearInterval(e) : t && (exportSvg(), document.getElementById("ifYes").style.display = "none", t.innerHTML = "", clearInterval(e), eventFire(document.getElementById("popup-4495").querySelector("button.close"), "click"))
    }, 1e3)
}, !1);